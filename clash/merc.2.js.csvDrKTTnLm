//Merc
log("Starting merc script")
//test area
//send_item("Sychris", getItemSlot("mpot0"), 2)

//todo:
//convert configs.mode.upgrade.upgradeWhitelist to a map
//convert configs.mode.upgrade.combineWhitelist to a map
// convert pots_to_buy to a map

load_code(10)

//-----------------------------sockets stuff---------------------------------

//not sure if this is needed or even works
//socket.removeAllListeners();
//parent.socket.onAny((eventName, ...args) => {
//  log(eventName, args)
//});

//Configs
configs.mode.upgrade.enable = 1
var enable_buying_pots = 1
var pots_to_buy = {
  //ItemName, Count
  mpot0: 8000,
  mpot1: 8000,
  hpot0: 5000
}


configs.mode.exchangeItems = false

var top_up_pots_enable = true

configs.mode.luck.enabled = 1


var regen_to_percent = 80



configs.mode.sell.enabled = true
configs.mode.sell.items.set('test_orb', 0)
configs.mode.sell.items.set('hpamulet', 0)
configs.mode.sell.items.set('wand', 0)
configs.mode.sell.items.set('stinger', 0)
configs.mode.sell.items.set('hpbelt', 0)
configs.mode.sell.items.set('cclaw', 0)


pontyitems = []

//intervals
var luck_players_interval = 1000
var top_up_pots_Interval = 10000
var regen_mp_Interval = 1000

//setInterval(pri,1000)
setInterval(exchangeSlotZero, 2000);
setInterval(moveToPlayer, 180000)
setInterval(sellmode, configs.mode.sell.interval);
setInterval(upgrade_check, 750);
setInterval(luck_players, luck_players_interval);
setInterval(top_up_pots, top_up_pots_Interval);
setInterval(regen_mp, regen_mp_Interval);
setInterval(buy_pots, top_up_pots_Interval);
//setInterval(getPontyData,50000)
//setInterval(buyPontyItems,1000)
function exchangeSlotZero() {
  if(configs.mode.exchangeItems)   exchange(0)
}

function npcInRange(npcName) {
  map = parent.G.maps[character.map]
  for (npc of map.npcs) {
    if (npcName == npc.id) {
      var pos = {}
      pos.x = npc.position[0]
      pos.y = npc.position[1]
      pos.map = character.map
      if (simple_distance(character, pos) < 400) return true
    }
  }
  return false
}

function pri() {
  if (parent.character.slots.trade3 == null) {
    log("no more offerings")
    if (slot = getItemSlot("offering") == -1) parent.buy("offering")
    
    slot = getItemSlot("offering")
    if (slot != -1) {
      trade(getItemSlot("offering"), 3, 32904000, quantity) // where trade_slot is 1 to 16 - example, trade(0,4,1000) 
      //                      puts the first item in inventory to the 4th trade slot for 1000 gold [27/10/16]
    }
  }
}

function moveToPlayer() {
  smart_move("Sychris")
  goHome = async () => {
    if (await this.wait(60)) {
      use_skill("use_town")
    }
  }
}

wait = (seconds) =>
  new Promise(resolve =>
    setTimeout(() => resolve(true), seconds * 1000)
  );

function getPontyData() {
  
  var stuffToBuy = ["seashell", "merry", "quiver", "ringsj", "intring", "wattire", "staff", "tshirt0", "tshirt1", "wbook0", "intearring", "dexearring"]
  
  parent.socket.once("secondhands", (pontyData) => {
    for (item of pontyData) {
      if (stuffToBuy.includes(item.name)) {
        pontyitems.push(item.rid)
        log("found " + item.name + " from Ponty")
      }
    }
    //show_json(pontyData)
  })
  parent.socket.emit("secondhands")
}

function buyPontyItems() {
  if (pontyitems) {
    while (buy = pontyitems.pop()) {
      parent.socket.emit("sbuy", {"rid": buy});}
  }
}



function regen_mp() {
  if(configs.mode.regen.enable){
    if (is_on_cooldown("regen_mp")) return
    var mp_percent = character.mp / character.max_mp
    mp_percent = mp_percent * 100
    //log(mp_percent)
    if (mp_percent < configs.mode.regen.to_percent) {
      //log("regening")
      use_skill("regen_mp")
    }
  }
}



//Internal vals


//Functions




function top_up_pots() {
  if (top_up_pots_enable == true) {
    for (ppl in configs.mode.give_pots.donate_pots_to) {
      //log("looking for " + configs.mode.give_pots.donate_pots_to[ppl])
      var charac = get_player(configs.mode.give_pots.donate_pots_to[ppl])
      if (ck_range(charac, 320)) {
        log("sent top up query to " + charac.name)
        send_cm(charac.name, "what_pots_do_you_need?")
      }
    }
  }
}

function ck_range_by_name(name, range) {
  var c = get_player(name)
  if (ck_range(c, range)) {
    return true
  } else {
    return false
  }
}

function send_item_by_name(player, item, quantity) {
  send_item(player, getItemSlot(item), quantity)
}









function ck_range(tar, range) {
  //log("checking range")
  if (tar !== null) {
    if (Math.sqrt((character.real_x - tar.real_x) * (character.real_x - tar.real_x) + 
      (character.real_y - tar.real_y) * (character.real_y - tar.real_y)) < range) {
      return true;
    } else {
      return false;
    }
  } else return false; //was null
}

function get_grade(item) {
  return parent.G.items[item.name].grades;
}

// Returns the item slot and the item given the slot to start from and a filter.
function find_item(filter) {
  for (let i = 0; i < character.items.length; i++) {
    let item = character.items[i];
    
    if (item && filter(item))
      return [i, character.items[i]];
  }
  
  return [-1, null];
}

function buy_pots() {
  //log(pots_to_buy)
  for (pot in pots_to_buy) {
    //log(pot)
    var current_pots = character.items[getItemSlot(pot)]
    var buy_count = 0
    if (current_pots == undefined) buy_count = pots_to_buy[pot]
    else if (current_pots.q < pots_to_buy[pot]) buy_count = pots_to_buy[pot] - current_pots.q
    else if (current_pots.q < 1) buy_count = pots_to_buy[pot]
    //log(current_pots.q)
    if (buy_count > 0) {
      log("buying " + buy_count + " " + pot)
      parent.buy(pot, buy_count)
    }
  }
}